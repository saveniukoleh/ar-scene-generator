{"version":3,"sources":["components/Header.tsx","ts/output.ts","ts/InputManager.ts","components/Final.tsx","components/Footer.tsx","components/Forms/PatternList.tsx","components/Forms/TableRow.tsx","components/Forms/Table.tsx","components/Form.tsx","App.tsx","index.tsx"],"names":["Header","className","href","React","Component","outputHTMLConfig","inputManager","prepared","patterns","barcodes","data","output","this","pattern","isNaN","push","updateType","newContent","id","mode","repeat","model","sound","video","image","index","i","getPatterns","length","barcode","patternNames","modes","modelFiles","imageFiles","videoFiles","audioFiles","repeatOptions","forEach","element","Final","useEffect","finalOutput","document","getElementById","code","compileData","innerText","style","whiteSpace","Footer","target","PatternList","props","state","patternListValues","Array","patternId","prepareOptions","options","marginTop","onChange","onInput","bind","event","preventDefault","files","name","addPattern","newElem","createElement","key","setState","value","type","htmlFor","TableRow","useState","fileName","updateFileName","musicfileName","updateMusicFileName","fileEntered","updateFileEntered","musicfileEntered","updateMusicFileEntered","contentType","updateContentType","e","newContentType","updateData","filename","onClick","checked","Table","tableRows","prepareData","elem","newRow","getBarcode","Form","stage","codePrepared","alert","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.500658db.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <div className=\"alert alert-dismissible alert-info\">\n          To read full documentation and download required libraries use{\" \"}\n          <a className=\"alert-link\" href=\"http://ar.gamehub.od.ua/en/docs.html\">\n            this link\n          </a>\n          .\n        </div>\n        {/* <div className=\"language-select\">\n          <select\n            className=\"form-control\"\n            onChange={(e) => {\n              const value = e.target.value;\n              if (value === 'EN') {\n                window.location.href = \"http://ar.gamehub.od.ua/en/index.html\";\n              } else if (value === 'UA') {\n                window.location.href = \"http://ar.gamehub.od.ua/\";\n              }\n            }}\n          >\n            <option>EN</option>\n            <option>UA</option>\n          </select>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","const outputHTMLConfig = [\n    `\n    <!DOCTYPE html>\n\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\n        <title>AR project template</title>\n        <!-- Main libraries -->\n        <script src=\"js/three.js\"></script>\n        <script src=\"js/tween.umd.js\"></script>\n        <script src='loaders/GLTFLoader.js'></script>\n        <script src='loaders/GLTF2Loader.js'></script>\n        <script src='loaders/MTLLoader.js'></script>\n        <script src='loaders/OBJLoader.js'></script>\n        <!-- jsartookit -->\n        <script src=\"jsartoolkit5/artoolkit.min.js\"></script>\n        <script src=\"jsartoolkit5/artoolkit.api.js\"></script>\n        <!-- threex.artoolkit -->\n        <script src=\"threex/threex-artoolkitsource.js\"></script>\n        <script src=\"threex/threex-artoolkitcontext.js\"></script>\n        <script src=\"threex/threex-arbasecontrols.js\"></script>\n        <script src=\"threex/threex-armarkercontrols.js\"></script>\n    </head>\n    \n    <body style='margin : 0px; overflow: hidden; font-family: Monospace; user-select: none; pointer-events: none;'>\n    \n        <div id=\"access\" style=\"top: 0; left: 0; right:0; bottom: 0; background: #000; position: absolute; user-select: all; pointer-events: all;\">\n            <div id=\"text-wrapper\" style=\"top: 50%; left: 50%; position: absolute; color: #fff; transform: translate(-50%, -50%); text-align: center;\n                    text-transform: uppercase; font-family: Arial, Helvetica, sans-serif; font-weight: 400; line-height: 1.5em; font-size: large; white-space: nowrap;\n                    user-select: none; pointer-events: none;\n                \">\n                Press here\n                <br>\n                to enter the experience\n            </div>\n        </div>\n    \n        <div id=\"loader\" style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: #fff; pointer-events: none; user-select: none;\n            transition: all .2s linear; display: none;\">\n            <div style=\"left: 50%; top: 50%; position: absolute; transform: translate(-50%, -50%); text-align: center; width: 130px; height: 165px;\n                font-family: Arial, Helvetica, sans-serif; font-weight: 400; line-height: 1.5em; font-size: large;\" class=\"spinner-wrapper\">\n                <img style=\"width: 130px; height: 130px; pointer-events: none; user-select: none;\" src=\"data/spin.gif\" alt=\"spin gif\">\n                <br>\n                Loading...\n            </div>\n        </div>\n    \n        <script>\n            const access = document.getElementById('access');\n            const loader = document.getElementById('loader');\n    \n            function initiateExperience() {\n                // Global variables\n                var scene, camera, renderer, clock, deltaTime, totalTime;\n    \n                var patternIdOffset = 10000000000\n    \n                // AR toolkit variables\n                var arToolkitSource, arToolkitContext;\n    \n                // Main container\n                var markerRoot, mainContainer;\n    \n                // Array for any video or audio keys\n                var audioContent = [];\n    \n                var contentPromises = [];\n    \n                let contentInitialized = false;\n                let barcodesSound = new Map();\n                let patternsSound = new Map();\n                let barcodesID = [];\n                let patternsID = [];\n    \n                let controller;\n    \n                // Initializing the scene and animation\n                initialize();\n                animate();\n    \n                function initialize() {\n                    // Creating new scene\n                    scene = new THREE.Scene();\n    \n                    // Adding light to the scene\n                    let ambientLight = new THREE.AmbientLight(0xffffff, 0.75);\n                    scene.add(ambientLight);\n    \n                    // Creating camera\n                    camera = new THREE.Camera();\n                    scene.add(camera);\n                    const listener = new THREE.AudioListener();\n                    camera.add(listener);\n                    const audioLoader = new THREE.AudioLoader();\n    \n                    // Creating renderer\n                    renderer = new THREE.WebGLRenderer({\n                        antialias: true,\n                        alpha: true\n                    });\n                    renderer.setClearColor(new THREE.Color('lightgrey'), 0)\n                    renderer.setSize(640, 480);\n                    renderer.domElement.style.position = 'absolute'\n                    renderer.domElement.style.top = '0px'\n                    renderer.domElement.style.left = '0px'\n                    document.body.appendChild(renderer.domElement);\n    \n                    clock = new THREE.Clock();\n                    deltaTime = 0;\n                    totalTime = 0;\n    \n                    arToolkitSource = new THREEx.ArToolkitSource({\n                        sourceType: 'webcam',\n                    });\n    \n                    // Re-render canvas and ar-toolkit controller\n                    function onResize() {\n                        arToolkitSource.onResize()\n                        arToolkitSource.copySizeTo(renderer.domElement)\n                        if (arToolkitContext.arController !== null) {\n                            arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)\n                        }\n                    }\n    \n                    // Render on initialization\n                    arToolkitSource.init(function onReady() {\n                        onResize()\n                    });\n    \n                    // Re-render canvas evety time browser window gets resize\n                    window.addEventListener('resize', function () {\n                        onResize()\n                    });\n    \n                    // AR context initialization\n                    arToolkitContext = new THREEx.ArToolkitContext({\n                        cameraParametersUrl: 'data/camera_para.dat',\n                        detectionMode: 'mono_and_matrix',\n                        matrixCodeType: \"3x3\",\n                        maxDetectionRate: 60,\n                        canvasWidth: 640,\n                        canvasHeight: 480\n                    });\n    \n                    // Reasign camera projection Matrix to AR toolkit projection matrix\n                    arToolkitContext.init(function onCompleted() {\n                        camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());\n                    });\n    \n                    // Main group on the scene for all markers\n                    mainContainer = new THREE.Group();\n    \n                    // Array for .patt file names\n                    const patternNames = [`, `];\n                    // Array for barcodes\n                    const patternBarcode = [`, `];\n                    // Array for content types\n                    const modes = [`, `];\n                    // Array for .glb or .gltf model file names\n                    const modelFiles = [`, `];\n                    // Array for image file names\n                    const imageFiles = [`, `];\n                    // Array for video file names\n                    const videoFiles = [`, `];\n                    // Array for audio file names\n                    const audioFiles = [`, `];\n                    // Array for autoplay option\n                    const repeatOptions = [`, `];\n      \n                    // Creating separate group for every marker\n                    const markerRoots = [];\n                    for (let i = 0; i < `, `; i++) {\n                        markerRoots[i] = new THREE.Group();\n                    }\n      \n                    // Adding content to every marker group\n                    for (let i = 0; i < `, `; i++) {\n                        mainContainer.add(markerRoots[i]);\n    \n                        // If current barcode is -1, create marker controller type. Otherwise barcode controller\n                        if (patternBarcode[i] === -1) {\n                            let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoots[i], {\n                                type: 'pattern', patternUrl: patternNames[i], size: 1 + (i + 1) / patternIdOffset\n                            })\n                            patternsID.push(patternNames[i]);\n                        } else {\n                            let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoots[i], {\n                                type: \"barcode\", barcodeValue: patternBarcode[i],\n                            })\n                            barcodesID.push(patternBarcode[i]);\n                        }\n    \n                        // Using switch operator to check for content type\n                        switch (modes[i]) {\n                            // If current type is a model, do next\n                            case 'model':\n                                function onProgress(xhr) { console.log((xhr.loaded / xhr.total * 100) + '% loaded'); }\n                                function onError(xhr) { console.log('An error happened'); }\n    \n                                contentPromises.push(new Promise((resolve) => {\n                                    // Creating a loader for .glb or .gltf models\n                                    const test = new THREE.GLTF2Loader().load(\\`\\${modelFiles[i]}\\`, (response) => {\n                                        const scene = response.scene;\n                                        const object = scene.children[0];\n                                        // Sometimes we can not see our model because it is too large on the scene or too small\n                                        // For more info read: https://threejs.org/docs/index.html#manual/en/introduction/Loading-3D-models\n                                        // Here we scale it down to see it on scene for sure. You can remove this scale if needed\n                                        object.scale.set(0.01, 0.01, 0.01);\n                                        // You can adjust the position and rotation of your model also, play with it\n                                        // object.position.set(0, Math.PI / 2, Math.PI / 4);\n                                        // object.rotation.set(0, Math.PI / 2, Math.PI / 4);\n                                        // Adding our model to the marker group container\n                                        markerRoots[i].add(object);\n                                        resolve(modelFiles[i])\n                                    }, onProgress, onError)\n                                }).then((file) => {\n                                    console.log(\\`File \\${file} loaded\\`)\n                                }))\n                                break;\n                            // If current type is an image, do next\n                            case 'image':\n                                if (imageFiles[i]) {\n                                    contentPromises.push(new Promise((resolve) => {\n                                        // Creating a loader for textures\n                                        let loader = new THREE.TextureLoader();\n                                        loader.load(\\`\\${imageFiles[i]}\\`, (texture) => {\n                                            let geometry1, ratio = texture.image.naturalWidth / texture.image.naturalHeight;\n                                            if (texture.image.naturalHeight < texture.image.naturalWidth) {\n                                                geometry1 = new THREE.PlaneBufferGeometry(ratio, 1);\n                                            } else {\n                                                geometry1 = new THREE.PlaneBufferGeometry(1, 1 / ratio);\n                                            }\n                                            let material1 = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n                                            mesh1 = new THREE.Mesh(geometry1, material1);\n                                            // Rotating the plane\n                                            mesh1.rotation.x = -Math.PI / 2;\n                                            // Adding to the marker group container\n                                            markerRoots[i].add(mesh1);\n                                            resolve(imageFiles[i])\n                                        });\n                                    }).then(image => {\n                                        console.log(\\`File \\${image} loaded\\`)\n                                    }))\n                                }\n                                break;\n                            // If current type is a video, do next\n                            case 'video':\n                                // Creating plane for video canvas, canvas should be adjusted for the video dimensions\n                                // Currently this is 16:9 video dimension\n                                let geometry2 = new THREE.PlaneBufferGeometry(1.6 , 0.9);\n                                // Creating html video element\n                                let video = document.createElement('video');\n                                video.src = \\`\\${videoFiles[i]}\\`;\n                                video.playsInline = true;\n                                // Setting the autoplay if needed\n                                if (repeatOptions[i]) {\n                                    video.addEventListener('ended', () => {\n                                        video.play();\n                                    })\n                                }\n                                // Adding video to correstpondent audio content array\n                                if (patternBarcode[i] === -1) {\n                                    patternsSound.set(i, video);\n                                } else {\n                                    barcodesSound.set(patternBarcode[i], video);\n                                }\n                                // Coping video texture to the plane\n                                let texture2 = new THREE.VideoTexture(video);\n                                texture2.minFilter = THREE.LinearFilter;\n                                texture2.magFilter = THREE.LinearFilter;\n                                texture2.format = THREE.RGBFormat;\n                                let material2 = new THREE.MeshBasicMaterial({ map: texture2 });\n                                mesh2 = new THREE.Mesh(geometry2, material2);\n                                // Rotating the plane\n                                mesh2.rotation.x = -Math.PI / 2;\n                                // Adding plane to the marker group\n                                markerRoots[i].add(mesh2);\n                                break;\n                            // In case we need a 3d controller prototype\n                            case 'controller':\n                                controller = new THREE.Mesh(\n                                    new THREE.CubeGeometry(10, 0.15, 0.15),\n                                    new THREE.MeshBasicMaterial({ color: 'green' })\n                                );\n                                controller.rotation.y = Math.PI / 2;\n                                controller.position.y = 0.125;\n                                controller.position.z = -4.5;\n                                markerRoots[i].add(controller);\n                                break;\n                            // In case none of the content was selected\n                            default:\n                                mesh11 = new THREE.Mesh(new THREE.PlaneBufferGeometry(1, 1),\n                                    new THREE.MeshBasicMaterial({ color: '#fff' }));\n                                mesh11.rotation.x = -Math.PI / 2;\n                                markerRoots[i].add(mesh11);\n                                break;\n                        }\n    \n                        // Adding audio files to correspondent array\n                        if (audioFiles[i]) {\n                            contentPromises.push(new Promise((resolve, reject) => {\n                                audioLoader.load(\\`\\${audioFiles[i]}\\`, function (buffer) {\n                                    // Creating audio source\n                                    let sound = new THREE.Audio(listener);\n                                    sound.name = \\`\\${audioFiles[i]}\\`;\n                                    sound.setBuffer(buffer);\n                                    // Setting autoplay for the audio\n                                    if (repeatOptions[i]) {\n                                        sound.setLoop(true);\n                                    }\n                                    if (patternBarcode[i] === -1) {\n                                        patternsSound.set(i, sound);\n                                    } else {\n                                        barcodesSound.set(patternBarcode[i], sound);\n                                    }\n                                    resolve(sound)\n                                });\n                            }).then((sound) => {\n                                sound.play()\n                                sound.stop()\n                                console.log(\\`File \\${sound.name} loaded\\`)\n                            }))\n                        }\n                    }\n    \n                    // Hiding the loader after most of the content has been loaded\n                    Promise.all(contentPromises)\n                        .then(() => {\n                            console.log('Most of the content loaded')\n                            contentInitialized = true;\n                            loader.style.opacity = '0';\n                        });\n    \n                    // Adding main container for all of the marker groups to the scene\n                    scene.add(mainContainer);\n                }\n    \n                function checkController() {\n                    if (controller) {\n                        mainContainer.traverse((object) => {\n                            if (object.isMesh && object !== controller) {\n                                if (detectCollisionCubes(object, controller)) {\n                                    object.material.color.set('red')\n                                } else {\n                                    object.material.color.set('white')\n                                }\n                            }\n                        });\n                    }\n                }\n    \n                // Checking for the intersections between two objects\n                function detectCollisionCubes(object1, object2) {\n                    object1.geometry.computeBoundingBox();\n                    object2.geometry.computeBoundingBox();\n                    object1.updateMatrixWorld();\n                    object2.updateMatrixWorld();\n    \n                    const box1 = object1.geometry.boundingBox.clone();\n                    box1.applyMatrix4(object1.matrixWorld);\n    \n                    const box2 = object2.geometry.boundingBox.clone();\n                    box2.applyMatrix4(object2.matrixWorld);\n    \n                    return box1.intersectsBox(box2);\n                };\n    \n                // Updating AR source on each frame and manipulating with sound\n                function update() {\n                    if (arToolkitSource.ready !== false) {\n                        arToolkitContext.update(arToolkitSource.domElement);\n                        if (contentInitialized) {\n                            if (barcodesID.length) {\n                                barcodesID.forEach((elem, index) => {\n                                    if (arToolkitContext.arController.barcodeMarkers[elem].inCurrent) {\n                                        let sound = barcodesSound.get(elem);\n                                        if (sound && !sound.isPlaying) sound.play();\n                                    } else {\n                                        let sound = barcodesSound.get(elem);\n                                        if (sound && sound.nodeName === 'VIDEO') {\n                                            if (!sound.paused) sound.pause()\n                                        }\n                                        if (sound && sound.isPlaying) sound.stop();\n                                    }\n                                })\n                            }\n                            if (patternsID.length) {\n                                for (let index = 0; index < patternsID.length; index++) {\n                                    if (arToolkitContext.arController.patternMarkers[index].inCurrent) {\n                                        let patternID = (arToolkitContext.arController.patternMarkers[index].markerWidth - 1) * patternIdOffset - 1;\n                                        patternID = Math.round(patternID)\n                                        let sound = patternsSound.get(patternID);\n                                        if (sound && !sound.isPlaying) sound.play();\n                                    } else {\n                                        let patternID = (arToolkitContext.arController.patternMarkers[index].markerWidth - 1) * patternIdOffset - 1;\n                                        patternID = Math.round(patternID)\n                                        let sound = patternsSound.get(patternID);\n                                        if (sound && sound.nodeName === 'VIDEO') {\n                                            if (!sound.paused) sound.pause()\n                                        }\n                                        if (sound && sound.isPlaying) sound.stop();\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n    \n                // Render scene\n                function render() {\n                    renderer.render(scene, camera);\n                }\n    \n                // Animation loop\n                function animate(time) {\n                    // Requesting animation loop from the browser\n                    requestAnimationFrame(animate);\n                    deltaTime = clock.getDelta();\n                    totalTime += deltaTime;\n                    update();\n                    checkController();\n                    render();\n                }\n            }\n    \n            // Removing entry screen after user interaction to unlock audio content. Safari browser policy\n            access.addEventListener('click', () => {\n                initiateExperience();\n                document.body.removeChild(access);\n                loader.style.display = 'block';\n            });\n        </script>\n    \n    </body>\n    \n    </html>\n    `\n    ,\n];\n\nexport { outputHTMLConfig };\n","import { outputHTMLConfig } from \"./output\";\n\ninterface Data {\n  pattern: string;\n  barcode: number;\n  mode: string;\n  model: string;\n  sound: string;\n  image: string;\n  video: string;\n  repeat: string;\n}\n\nclass InputManager {\n  private prepared: boolean;\n  private patterns: Array<string>;\n  private barcodes: Array<number>;\n\n  private data: Array<Data>;\n  private output: string;\n\n  constructor() {\n    this.prepared = true;\n    this.patterns = [];\n    this.barcodes = [];\n\n    this.data = [];\n    this.output = outputHTMLConfig[0];\n  }\n\n  addPattern(pattern: any) {\n    if (isNaN(pattern)) {\n      this.patterns.push(pattern);\n      this.barcodes.push(-1);\n    } else {\n      this.patterns.push(\"\");\n      this.barcodes.push(pattern);\n    }\n  }\n\n  public get getPatterns() {\n    return this.patterns;\n  }\n\n  public get codePrepared() {\n    return this.prepared;\n  }\n\n  public get outputHTML() {\n    return this.output;\n  }\n\n  public updateData(updateType: string, newContent: string, id: number) {\n    switch (updateType) {\n      case \"mode\":\n        this.data[id].mode = newContent;\n        break;\n      case \"repeat\":\n        this.data[id].repeat = newContent;\n        break;\n      case \"model\":\n        this.data[id].model = newContent;\n        break;\n      case \"sound\":\n        this.data[id].sound = newContent;\n        break;\n      case \"video\":\n        this.data[id].video = newContent;\n        break;\n      case \"image\":\n        this.data[id].image = newContent;\n        break;\n    }\n  }\n\n  public getBarcode(index: number) {\n    return this.barcodes[index];\n  }\n\n  public prepareData() {\n    for (let i = 0; i < this.getPatterns.length; i++) {\n      this.data.push({\n        pattern: this.patterns[i],\n        barcode: this.barcodes[i],\n        mode: \"image\",\n        model: \"\",\n        sound: \"\",\n        image: \"\",\n        video: \"\",\n        repeat: \"false\",\n      });\n    }\n  }\n\n  public compileData() {\n    let patternNames = \"\";\n    let barcodes = \"\";\n    let modes = \"\";\n    let modelFiles = \"\";\n    let imageFiles = \"\";\n    let videoFiles = \"\";\n    let audioFiles = \"\";\n    let repeatOptions = \"\";\n\n    this.data.forEach((element, index) => {\n      if (index !== this.data.length - 1) {\n        patternNames += `\\\"${element.pattern}\\\" ,`;\n        barcodes += `${element.barcode} ,`;\n        modes += `\\\"${element.mode}\\\" ,`;\n        modelFiles += `\\\"${element.model}\\\" ,`;\n        imageFiles += `\\\"${element.image}\\\" ,`;\n        videoFiles += `\\\"${element.video}\\\" ,`;\n        audioFiles += `\\\"${element.sound}\\\" ,`;\n        repeatOptions += `\\\"${element.repeat}\\\" ,`;\n      } else {\n        patternNames += `\\\"${element.pattern}\\\"`;\n        barcodes += `${element.barcode}`;\n        modes += `\\\"${element.mode}\\\"`;\n        modelFiles += `\\\"${element.model}\\\"`;\n        imageFiles += `\\\"${element.image}\\\"`;\n        videoFiles += `\\\"${element.video}\\\"`;\n        audioFiles += `\\\"${element.sound}\\\"`;\n        repeatOptions += `\\\"${element.repeat}\\\"`;\n      }\n    });\n\n    this.output +=\n      patternNames +\n      outputHTMLConfig[1] +\n      barcodes +\n      outputHTMLConfig[2] +\n      modes +\n      outputHTMLConfig[3] +\n      modelFiles +\n      outputHTMLConfig[4] +\n      imageFiles +\n      outputHTMLConfig[5] +\n      videoFiles +\n      outputHTMLConfig[6] +\n      audioFiles +\n      outputHTMLConfig[7] +\n      repeatOptions +\n      outputHTMLConfig[8] +\n      `${this.getPatterns.length}` +\n      outputHTMLConfig[9] +\n      `${this.getPatterns.length}` +\n      outputHTMLConfig[10];\n\n    return this.output;\n  }\n}\n\nconst inputManager = new InputManager();\nexport default inputManager;\n","import { useEffect } from \"react\";\nimport inputManager from \"../ts/InputManager\";\n\nexport default function Final() {\n  useEffect(() => {\n    const finalOutput = document.getElementById(\"finalOutput\");\n    const code = inputManager.compileData();\n    finalOutput.innerText = code;\n  });\n\n  return (\n    <div className=\"final-output\">\n      <b>Generated code for your index.html:</b>\n      <br></br>\n      <br></br>\n      {/* <button onClick={copyCode}>Copy text</button> */}\n      <div id=\"finalOutput\" style={{ whiteSpace: \"pre\" }}></div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <div className=\"alert alert-dismissible alert-info\">\n          <h4>Prepare your files</h4>\n          <ul>\n            <li>\n              Pattern Marker - marker, which is generated from an image, to create .patt file use{\" \"}\n              <b>\n                <a\n                  href=\"https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html\"\n                  target=\"_blank\"\n                >\n                  this link\n                </a>\n              </b>\n              . Make sure to set Pattern Ration to 0.90.\n            </li>\n            <li>\n              Barcode Marker - marker, which is generated in a range of numbers, for example from 0 to 63.\n              You can create a barcode use{\" \"}\n              <b>\n                <a\n                  href=\"https://au.gmented.com/app/marker/marker.php\"\n                  target=\"_blank\"\n                >\n                  this link\n                </a>\n              </b>\n              . Make sure you have chosen right oprions:\n              <li> Border size (% of marker width): 0.1 </li>\n              <li> Barcode dimensions: 3х3 </li>\n              <li> Markers have black borders.</li>\n            </li>\n            <li>\n              .mtl .obj - model files. Both files should be prepared with their textures and correctly added to the project.\n            </li>\n          </ul>\n          <h4>Working with the generator</h4>\n          <ol>\n            <li>\n              Upload your patterns files or choose barcodes which you will use in your project. This will generate a table which you can use to input other files of your content.\n              <br></br>\n            </li>\n            <li>\n              You can choose what kind of content will be linked with each pattern. For one pattern you can select either model, video or image with one audio file.\n              <br></br>\n            </li>\n            <li>\n              After you click submit button the text for the index.html will appear.\n            </li>\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport inputManager from \"../../ts/InputManager\";\n\nexport default class PatternList extends Component {\n  state = {\n    patternListValues: Array(),\n    patternId: 0,\n  };\n\n  constructor(props: {}) {\n    super(props);\n    this.onInput = this.onInput.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onInput(event: any) {\n    event.preventDefault();\n    if (!event.target.files[0]) return;\n    const name: string = event.target.files[0].name;\n    inputManager.addPattern(name);\n    const newElem = React.createElement(\n      \"li\",\n      {\n        className:\n          \"list-group-item d-flex justify-content-between align-items-center\",\n        key: this.state.patternId,\n      },\n      name\n    );\n    this.setState({ patternId: this.state.patternId++ });\n    this.state.patternListValues.push(newElem);\n    this.setState({ patternListValues: this.state.patternListValues });\n  }\n\n  onChange(event: any) {\n    event.preventDefault();\n    const code = event.target.value;\n    inputManager.addPattern(code);\n    const newElem = React.createElement(\n      \"li\",\n      {\n        className:\n          \"list-group-item d-flex justify-content-between align-items-center\",\n        key: this.state.patternId,\n      },\n      \"Barcode \",\n      code\n    );\n    this.setState({ patternId: this.state.patternId++ });\n    this.state.patternListValues.push(newElem);\n    this.setState({ patternListValues: this.state.patternListValues });\n  }\n\n  prepareOptions = () => {\n    let options = [];\n    for (let i = 0; i <= 63; i++) {\n      options.push(<option>{i}</option>);\n    }\n    return (\n      <div\n        className=\"form-group\"\n        style={{\n          marginTop: \"12px\",\n        }}\n      >\n        Choose a barcode:\n        <select\n          className=\"form-control\"\n          style={{ marginTop: \"12px\" }}\n          onChange={this.onChange}\n        >\n          {options}\n        </select>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"pattern-list\">\n        <ul className=\"list-group\">{this.state.patternListValues}</ul>\n        <div className=\"custom-file pattern-file-input\">\n          <input\n            type=\"file\"\n            className=\"custom-file-input\"\n            id=\"inputGroupFile02\"\n            onInput={this.onInput}\n          ></input>\n          <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\n            Choose file\n          </label>\n          {this.prepareOptions()}\n        </div>\n      </div>\n    );\n  }\n}\n","import { useState } from \"react\";\nimport inputManager from \"../../ts/InputManager\";\n\nexport default function TableRow(props: { name: string; id: number }) {\n  const [fileName, updateFileName] = useState(\"\");\n  const [musicfileName, updateMusicFileName] = useState(\"\");\n\n  const [fileEntered, updateFileEntered] = useState(false);\n  const [musicfileEntered, updateMusicFileEntered] = useState(false);\n\n  const [contentType, updateContentType] = useState(\"image\");\n\n  function onInput(e: any) {\n    e.preventDefault();\n    const filename = e.target.files[0].name;\n    updateFileName(filename);\n    updateFileEntered(true);\n    if (contentType === \"image\") {\n      inputManager.updateData(\"image\", filename, props.id);\n    } else if (contentType === \"video\") {\n      inputManager.updateData(\"video\", filename, props.id);\n    } else if (contentType === \"model\") {\n      inputManager.updateData(\"model\", filename, props.id);\n    }\n  }\n\n  function onMusicInput(e: any) {\n    e.preventDefault();\n    const filename = e.target.files[0].name;\n    updateMusicFileName(filename);\n    updateMusicFileEntered(true);\n    inputManager.updateData(\"sound\", filename, props.id);\n  }\n\n  function updateCols(newContentType: string) {\n    if (newContentType === \"Image\") {\n      newContentType = \"image\";\n    } else if (newContentType === \"Video\") {\n      newContentType = \"video\";\n    } else if (newContentType === \"Model\") {\n      newContentType = \"model\";\n    }\n    updateContentType(newContentType);\n    inputManager.updateData(\"mode\", newContentType, props.id);\n  }\n\n  function onCheckboxToggle(e: any) {\n    inputManager.updateData(\"repeat\", `${e.target.checked}`, props.id);\n  }\n\n  return (\n    <tr className=\"table-default\">\n      <td>{props.name}</td>\n      <td>\n        <select\n          className=\"form-control\"\n          onChange={(e) => updateCols(e.target.value)}\n        >\n          <option>Image</option>\n          <option>Video</option>\n          <option>Model</option>\n        </select>\n      </td>\n      <td>\n        {fileEntered ? (\n          fileName\n        ) : (\n          <div className=\"custom-file\">\n            <input\n              type=\"file\"\n              className=\"custom-file-input content-file-input\"\n              id=\"inputGroupFile02\"\n              onInput={onInput}\n            ></input>\n            <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\n              Choose file\n            </label>\n          </div>\n        )}\n      </td>\n      <td>\n        {contentType !== \"video\" ? (\n          musicfileEntered ? (\n            musicfileName\n          ) : (\n            <div className=\"custom-file\">\n              <input\n                type=\"file\"\n                className=\"custom-file-input content-file-input\"\n                id=\"inputGroupFile02\"\n                onInput={onMusicInput}\n              ></input>\n              <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\n                Choose file\n              </label>\n            </div>\n          )\n        ) : null}\n      </td>\n      <td>\n        <div className=\"custom-control custom-switch\">\n          <input\n            type=\"checkbox\"\n            className=\"custom-control-input\"\n            onClick={onCheckboxToggle}\n            id={`customSwitch${props.id}`}\n          ></input>\n          <label\n            className=\"custom-control-label\"\n            htmlFor={`customSwitch${props.id}`}\n          >\n            Switch\n          </label>\n        </div>\n      </td>\n    </tr>\n  );\n}\n","import React, { Component } from \"react\";\nimport inputManager from \"../../ts/InputManager\";\nimport TableRow from \"./TableRow\";\n\nexport default class Table extends Component {\n  state = {\n    tableRows: Array(),\n  };\n\n  componentDidMount() {\n    let i = 0;\n    this.state.tableRows.push(\n      <tr className=\"table-default\">\n        <td>\n          <b>.patt file</b>\n        </td>\n        <td>\n          <b>Content type</b>\n        </td>\n        <td>\n          <b>Content file</b>\n        </td>\n        <td>\n          <b>Audio file</b>\n        </td>\n        <td>\n          <b>Autoplay</b>\n        </td>\n      </tr>\n    );\n    inputManager.prepareData();\n    inputManager.getPatterns.forEach((elem: string, index) => {\n      let newRow;\n      if (elem === \"\") {\n        let barcode = inputManager.getBarcode(index);\n        newRow = <TableRow name={`Barcode ${barcode}`} id={i} />;\n      } else {\n        newRow = <TableRow name={elem} id={i} />;\n      }\n      this.state.tableRows.push(newRow);\n      i++;\n    });\n    this.setState({ tableRows: this.state.tableRows });\n  }\n\n  render() {\n    return (\n      <div className=\"table-wrapper\">\n        <table className=\"table table-hover\">\n          <tbody>{this.state.tableRows}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport inputManager from \"../ts/InputManager\";\nimport Final from \"./Final\";\nimport Footer from \"./Footer\";\nimport PatternList from \"./Forms/PatternList\";\nimport Table from \"./Forms/Table\";\n\nclass Form extends React.Component {\n  state = {\n    stage: \"pattern\",\n  };\n\n  constructor(props: {}) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    if (!inputManager.getPatterns.length) {\n      alert(\"Будь ласка хоча б один патерн чи баркод\");\n      return;\n    }\n    if (this.state.stage === \"pattern\") {\n      this.setState({ stage: \"table\" });\n    } else if (this.state.stage === \"table\" && inputManager.codePrepared) {\n      this.setState({ stage: \"final\" });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.stage === \"pattern\" ? (\n          <div className=\"main-pattern-instruction\">\n            Add .patt file or choose a barcode:\n          </div>\n        ) : null}\n        {this.state.stage === \"table\" ? (\n          <Table />\n        ) : this.state.stage === \"pattern\" ? (\n          <PatternList />\n        ) : (\n          <Final />\n        )}\n        <div className=\"main-button\" style={{ marginTop: \"24px\" }}>\n          {this.state.stage === \"final\" ? null : (\n            <button className=\"btn btn-primary\" onClick={this.onClick}>\n              Confirm\n            </button>\n          )}\n        </div>\n\n        {this.state.stage === \"final\" ? null : <Footer />}\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./css/bootstrap.css\";\nimport \"./css/main.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Form from \"./components/Form\";\nimport ProgressBar from \"./components/ProgressBar\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form />\n        {/* <ProgressBar /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
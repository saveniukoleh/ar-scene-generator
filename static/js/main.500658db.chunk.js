(this.webpackJsonp=this.webpackJsonp||[]).push([[0],{14:function(e,t,n){},15:function(e,t,n){},17:function(e,t,n){"use strict";n.r(t);var a=n(1),r=n.n(a),o=n(9),i=n.n(o),s=n(2),c=n(3),l=n(5),d=n(4),u=(n(14),n(15),n(0)),p=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(c.a)(n,[{key:"render",value:function(){return Object(u.jsx)("div",{className:"header",children:Object(u.jsxs)("div",{className:"alert alert-dismissible alert-info",children:["To read full documentation and download required libraries use"," ",Object(u.jsx)("a",{className:"alert-link",href:"http://ar.gamehub.od.ua/en/docs.html",children:"this link"}),"."]})})}}]),n}(r.a.Component),h=p,m=n(6),b=['\n    <!DOCTYPE html>\n\n    <head>\n        <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">\n        <title>AR project template</title>\n        \x3c!-- Main libraries --\x3e\n        <script src="js/three.js"><\/script>\n        <script src="js/tween.umd.js"><\/script>\n        <script src=\'loaders/GLTFLoader.js\'><\/script>\n        <script src=\'loaders/GLTF2Loader.js\'><\/script>\n        <script src=\'loaders/MTLLoader.js\'><\/script>\n        <script src=\'loaders/OBJLoader.js\'><\/script>\n        \x3c!-- jsartookit --\x3e\n        <script src="jsartoolkit5/artoolkit.min.js"><\/script>\n        <script src="jsartoolkit5/artoolkit.api.js"><\/script>\n        \x3c!-- threex.artoolkit --\x3e\n        <script src="threex/threex-artoolkitsource.js"><\/script>\n        <script src="threex/threex-artoolkitcontext.js"><\/script>\n        <script src="threex/threex-arbasecontrols.js"><\/script>\n        <script src="threex/threex-armarkercontrols.js"><\/script>\n    </head>\n    \n    <body style=\'margin : 0px; overflow: hidden; font-family: Monospace; user-select: none; pointer-events: none;\'>\n    \n        <div id="access" style="top: 0; left: 0; right:0; bottom: 0; background: #000; position: absolute; user-select: all; pointer-events: all;">\n            <div id="text-wrapper" style="top: 50%; left: 50%; position: absolute; color: #fff; transform: translate(-50%, -50%); text-align: center;\n                    text-transform: uppercase; font-family: Arial, Helvetica, sans-serif; font-weight: 400; line-height: 1.5em; font-size: large; white-space: nowrap;\n                    user-select: none; pointer-events: none;\n                ">\n                Press here\n                <br>\n                to enter the experience\n            </div>\n        </div>\n    \n        <div id="loader" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: #fff; pointer-events: none; user-select: none;\n            transition: all .2s linear; display: none;">\n            <div style="left: 50%; top: 50%; position: absolute; transform: translate(-50%, -50%); text-align: center; width: 130px; height: 165px;\n                font-family: Arial, Helvetica, sans-serif; font-weight: 400; line-height: 1.5em; font-size: large;" class="spinner-wrapper">\n                <img style="width: 130px; height: 130px; pointer-events: none; user-select: none;" src="data/spin.gif" alt="spin gif">\n                <br>\n                Loading...\n            </div>\n        </div>\n    \n        <script>\n            const access = document.getElementById(\'access\');\n            const loader = document.getElementById(\'loader\');\n    \n            function initiateExperience() {\n                // Global variables\n                var scene, camera, renderer, clock, deltaTime, totalTime;\n    \n                var patternIdOffset = 10000000000\n    \n                // AR toolkit variables\n                var arToolkitSource, arToolkitContext;\n    \n                // Main container\n                var markerRoot, mainContainer;\n    \n                // Array for any video or audio keys\n                var audioContent = [];\n    \n                var contentPromises = [];\n    \n                let contentInitialized = false;\n                let barcodesSound = new Map();\n                let patternsSound = new Map();\n                let barcodesID = [];\n                let patternsID = [];\n    \n                let controller;\n    \n                // Initializing the scene and animation\n                initialize();\n                animate();\n    \n                function initialize() {\n                    // Creating new scene\n                    scene = new THREE.Scene();\n    \n                    // Adding light to the scene\n                    let ambientLight = new THREE.AmbientLight(0xffffff, 0.75);\n                    scene.add(ambientLight);\n    \n                    // Creating camera\n                    camera = new THREE.Camera();\n                    scene.add(camera);\n                    const listener = new THREE.AudioListener();\n                    camera.add(listener);\n                    const audioLoader = new THREE.AudioLoader();\n    \n                    // Creating renderer\n                    renderer = new THREE.WebGLRenderer({\n                        antialias: true,\n                        alpha: true\n                    });\n                    renderer.setClearColor(new THREE.Color(\'lightgrey\'), 0)\n                    renderer.setSize(640, 480);\n                    renderer.domElement.style.position = \'absolute\'\n                    renderer.domElement.style.top = \'0px\'\n                    renderer.domElement.style.left = \'0px\'\n                    document.body.appendChild(renderer.domElement);\n    \n                    clock = new THREE.Clock();\n                    deltaTime = 0;\n                    totalTime = 0;\n    \n                    arToolkitSource = new THREEx.ArToolkitSource({\n                        sourceType: \'webcam\',\n                    });\n    \n                    // Re-render canvas and ar-toolkit controller\n                    function onResize() {\n                        arToolkitSource.onResize()\n                        arToolkitSource.copySizeTo(renderer.domElement)\n                        if (arToolkitContext.arController !== null) {\n                            arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)\n                        }\n                    }\n    \n                    // Render on initialization\n                    arToolkitSource.init(function onReady() {\n                        onResize()\n                    });\n    \n                    // Re-render canvas evety time browser window gets resize\n                    window.addEventListener(\'resize\', function () {\n                        onResize()\n                    });\n    \n                    // AR context initialization\n                    arToolkitContext = new THREEx.ArToolkitContext({\n                        cameraParametersUrl: \'data/camera_para.dat\',\n                        detectionMode: \'mono_and_matrix\',\n                        matrixCodeType: "3x3",\n                        maxDetectionRate: 60,\n                        canvasWidth: 640,\n                        canvasHeight: 480\n                    });\n    \n                    // Reasign camera projection Matrix to AR toolkit projection matrix\n                    arToolkitContext.init(function onCompleted() {\n                        camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());\n                    });\n    \n                    // Main group on the scene for all markers\n                    mainContainer = new THREE.Group();\n    \n                    // Array for .patt file names\n                    const patternNames = [',"];\n                    // Array for barcodes\n                    const patternBarcode = [","];\n                    // Array for content types\n                    const modes = [","];\n                    // Array for .glb or .gltf model file names\n                    const modelFiles = [","];\n                    // Array for image file names\n                    const imageFiles = [","];\n                    // Array for video file names\n                    const videoFiles = [","];\n                    // Array for audio file names\n                    const audioFiles = [","];\n                    // Array for autoplay option\n                    const repeatOptions = [","];\n      \n                    // Creating separate group for every marker\n                    const markerRoots = [];\n                    for (let i = 0; i < ","; i++) {\n                        markerRoots[i] = new THREE.Group();\n                    }\n      \n                    // Adding content to every marker group\n                    for (let i = 0; i < ","; i++) {\n                        mainContainer.add(markerRoots[i]);\n    \n                        // If current barcode is -1, create marker controller type. Otherwise barcode controller\n                        if (patternBarcode[i] === -1) {\n                            let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoots[i], {\n                                type: 'pattern', patternUrl: patternNames[i], size: 1 + (i + 1) / patternIdOffset\n                            })\n                            patternsID.push(patternNames[i]);\n                        } else {\n                            let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoots[i], {\n                                type: \"barcode\", barcodeValue: patternBarcode[i],\n                            })\n                            barcodesID.push(patternBarcode[i]);\n                        }\n    \n                        // Using switch operator to check for content type\n                        switch (modes[i]) {\n                            // If current type is a model, do next\n                            case 'model':\n                                function onProgress(xhr) { console.log((xhr.loaded / xhr.total * 100) + '% loaded'); }\n                                function onError(xhr) { console.log('An error happened'); }\n    \n                                contentPromises.push(new Promise((resolve) => {\n                                    // Creating a loader for .glb or .gltf models\n                                    const test = new THREE.GLTF2Loader().load(`${modelFiles[i]}`, (response) => {\n                                        const scene = response.scene;\n                                        const object = scene.children[0];\n                                        // Sometimes we can not see our model because it is too large on the scene or too small\n                                        // For more info read: https://threejs.org/docs/index.html#manual/en/introduction/Loading-3D-models\n                                        // Here we scale it down to see it on scene for sure. You can remove this scale if needed\n                                        object.scale.set(0.01, 0.01, 0.01);\n                                        // You can adjust the position and rotation of your model also, play with it\n                                        // object.position.set(0, Math.PI / 2, Math.PI / 4);\n                                        // object.rotation.set(0, Math.PI / 2, Math.PI / 4);\n                                        // Adding our model to the marker group container\n                                        markerRoots[i].add(object);\n                                        resolve(modelFiles[i])\n                                    }, onProgress, onError)\n                                }).then((file) => {\n                                    console.log(`File ${file} loaded`)\n                                }))\n                                break;\n                            // If current type is an image, do next\n                            case 'image':\n                                if (imageFiles[i]) {\n                                    contentPromises.push(new Promise((resolve) => {\n                                        // Creating a loader for textures\n                                        let loader = new THREE.TextureLoader();\n                                        loader.load(`${imageFiles[i]}`, (texture) => {\n                                            let geometry1, ratio = texture.image.naturalWidth / texture.image.naturalHeight;\n                                            if (texture.image.naturalHeight < texture.image.naturalWidth) {\n                                                geometry1 = new THREE.PlaneBufferGeometry(ratio, 1);\n                                            } else {\n                                                geometry1 = new THREE.PlaneBufferGeometry(1, 1 / ratio);\n                                            }\n                                            let material1 = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\n                                            mesh1 = new THREE.Mesh(geometry1, material1);\n                                            // Rotating the plane\n                                            mesh1.rotation.x = -Math.PI / 2;\n                                            // Adding to the marker group container\n                                            markerRoots[i].add(mesh1);\n                                            resolve(imageFiles[i])\n                                        });\n                                    }).then(image => {\n                                        console.log(`File ${image} loaded`)\n                                    }))\n                                }\n                                break;\n                            // If current type is a video, do next\n                            case 'video':\n                                // Creating plane for video canvas, canvas should be adjusted for the video dimensions\n                                // Currently this is 16:9 video dimension\n                                let geometry2 = new THREE.PlaneBufferGeometry(1.6 , 0.9);\n                                // Creating html video element\n                                let video = document.createElement('video');\n                                video.src = `${videoFiles[i]}`;\n                                video.playsInline = true;\n                                // Setting the autoplay if needed\n                                if (repeatOptions[i]) {\n                                    video.addEventListener('ended', () => {\n                                        video.play();\n                                    })\n                                }\n                                // Adding video to correstpondent audio content array\n                                if (patternBarcode[i] === -1) {\n                                    patternsSound.set(i, video);\n                                } else {\n                                    barcodesSound.set(patternBarcode[i], video);\n                                }\n                                // Coping video texture to the plane\n                                let texture2 = new THREE.VideoTexture(video);\n                                texture2.minFilter = THREE.LinearFilter;\n                                texture2.magFilter = THREE.LinearFilter;\n                                texture2.format = THREE.RGBFormat;\n                                let material2 = new THREE.MeshBasicMaterial({ map: texture2 });\n                                mesh2 = new THREE.Mesh(geometry2, material2);\n                                // Rotating the plane\n                                mesh2.rotation.x = -Math.PI / 2;\n                                // Adding plane to the marker group\n                                markerRoots[i].add(mesh2);\n                                break;\n                            // In case we need a 3d controller prototype\n                            case 'controller':\n                                controller = new THREE.Mesh(\n                                    new THREE.CubeGeometry(10, 0.15, 0.15),\n                                    new THREE.MeshBasicMaterial({ color: 'green' })\n                                );\n                                controller.rotation.y = Math.PI / 2;\n                                controller.position.y = 0.125;\n                                controller.position.z = -4.5;\n                                markerRoots[i].add(controller);\n                                break;\n                            // In case none of the content was selected\n                            default:\n                                mesh11 = new THREE.Mesh(new THREE.PlaneBufferGeometry(1, 1),\n                                    new THREE.MeshBasicMaterial({ color: '#fff' }));\n                                mesh11.rotation.x = -Math.PI / 2;\n                                markerRoots[i].add(mesh11);\n                                break;\n                        }\n    \n                        // Adding audio files to correspondent array\n                        if (audioFiles[i]) {\n                            contentPromises.push(new Promise((resolve, reject) => {\n                                audioLoader.load(`${audioFiles[i]}`, function (buffer) {\n                                    // Creating audio source\n                                    let sound = new THREE.Audio(listener);\n                                    sound.name = `${audioFiles[i]}`;\n                                    sound.setBuffer(buffer);\n                                    // Setting autoplay for the audio\n                                    if (repeatOptions[i]) {\n                                        sound.setLoop(true);\n                                    }\n                                    if (patternBarcode[i] === -1) {\n                                        patternsSound.set(i, sound);\n                                    } else {\n                                        barcodesSound.set(patternBarcode[i], sound);\n                                    }\n                                    resolve(sound)\n                                });\n                            }).then((sound) => {\n                                sound.play()\n                                sound.stop()\n                                console.log(`File ${sound.name} loaded`)\n                            }))\n                        }\n                    }\n    \n                    // Hiding the loader after most of the content has been loaded\n                    Promise.all(contentPromises)\n                        .then(() => {\n                            console.log('Most of the content loaded')\n                            contentInitialized = true;\n                            loader.style.opacity = '0';\n                        });\n    \n                    // Adding main container for all of the marker groups to the scene\n                    scene.add(mainContainer);\n                }\n    \n                function checkController() {\n                    if (controller) {\n                        mainContainer.traverse((object) => {\n                            if (object.isMesh && object !== controller) {\n                                if (detectCollisionCubes(object, controller)) {\n                                    object.material.color.set('red')\n                                } else {\n                                    object.material.color.set('white')\n                                }\n                            }\n                        });\n                    }\n                }\n    \n                // Checking for the intersections between two objects\n                function detectCollisionCubes(object1, object2) {\n                    object1.geometry.computeBoundingBox();\n                    object2.geometry.computeBoundingBox();\n                    object1.updateMatrixWorld();\n                    object2.updateMatrixWorld();\n    \n                    const box1 = object1.geometry.boundingBox.clone();\n                    box1.applyMatrix4(object1.matrixWorld);\n    \n                    const box2 = object2.geometry.boundingBox.clone();\n                    box2.applyMatrix4(object2.matrixWorld);\n    \n                    return box1.intersectsBox(box2);\n                };\n    \n                // Updating AR source on each frame and manipulating with sound\n                function update() {\n                    if (arToolkitSource.ready !== false) {\n                        arToolkitContext.update(arToolkitSource.domElement);\n                        if (contentInitialized) {\n                            if (barcodesID.length) {\n                                barcodesID.forEach((elem, index) => {\n                                    if (arToolkitContext.arController.barcodeMarkers[elem].inCurrent) {\n                                        let sound = barcodesSound.get(elem);\n                                        if (sound && !sound.isPlaying) sound.play();\n                                    } else {\n                                        let sound = barcodesSound.get(elem);\n                                        if (sound && sound.nodeName === 'VIDEO') {\n                                            if (!sound.paused) sound.pause()\n                                        }\n                                        if (sound && sound.isPlaying) sound.stop();\n                                    }\n                                })\n                            }\n                            if (patternsID.length) {\n                                for (let index = 0; index < patternsID.length; index++) {\n                                    if (arToolkitContext.arController.patternMarkers[index].inCurrent) {\n                                        let patternID = (arToolkitContext.arController.patternMarkers[index].markerWidth - 1) * patternIdOffset - 1;\n                                        patternID = Math.round(patternID)\n                                        let sound = patternsSound.get(patternID);\n                                        if (sound && !sound.isPlaying) sound.play();\n                                    } else {\n                                        let patternID = (arToolkitContext.arController.patternMarkers[index].markerWidth - 1) * patternIdOffset - 1;\n                                        patternID = Math.round(patternID)\n                                        let sound = patternsSound.get(patternID);\n                                        if (sound && sound.nodeName === 'VIDEO') {\n                                            if (!sound.paused) sound.pause()\n                                        }\n                                        if (sound && sound.isPlaying) sound.stop();\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n    \n                // Render scene\n                function render() {\n                    renderer.render(scene, camera);\n                }\n    \n                // Animation loop\n                function animate(time) {\n                    // Requesting animation loop from the browser\n                    requestAnimationFrame(animate);\n                    deltaTime = clock.getDelta();\n                    totalTime += deltaTime;\n                    update();\n                    checkController();\n                    render();\n                }\n            }\n    \n            // Removing entry screen after user interaction to unlock audio content. Safari browser policy\n            access.addEventListener('click', () => {\n                initiateExperience();\n                document.body.removeChild(access);\n                loader.style.display = 'block';\n            });\n        <\/script>\n    \n    </body>\n    \n    </html>\n    "],f=new(function(){function e(){Object(s.a)(this,e),this.prepared=void 0,this.patterns=void 0,this.barcodes=void 0,this.data=void 0,this.output=void 0,this.prepared=!0,this.patterns=[],this.barcodes=[],this.data=[],this.output=b[0]}return Object(c.a)(e,[{key:"addPattern",value:function(e){isNaN(e)?(this.patterns.push(e),this.barcodes.push(-1)):(this.patterns.push(""),this.barcodes.push(e))}},{key:"getPatterns",get:function(){return this.patterns}},{key:"codePrepared",get:function(){return this.prepared}},{key:"outputHTML",get:function(){return this.output}},{key:"updateData",value:function(e,t,n){switch(e){case"mode":this.data[n].mode=t;break;case"repeat":this.data[n].repeat=t;break;case"model":this.data[n].model=t;break;case"sound":this.data[n].sound=t;break;case"video":this.data[n].video=t;break;case"image":this.data[n].image=t}}},{key:"getBarcode",value:function(e){return this.barcodes[e]}},{key:"prepareData",value:function(){for(var e=0;e<this.getPatterns.length;e++)this.data.push({pattern:this.patterns[e],barcode:this.barcodes[e],mode:"image",model:"",sound:"",image:"",video:"",repeat:"false"})}},{key:"compileData",value:function(){var e=this,t="",n="",a="",r="",o="",i="",s="",c="";return this.data.forEach((function(l,d){d!==e.data.length-1?(t+='"'.concat(l.pattern,'" ,'),n+="".concat(l.barcode," ,"),a+='"'.concat(l.mode,'" ,'),r+='"'.concat(l.model,'" ,'),o+='"'.concat(l.image,'" ,'),i+='"'.concat(l.video,'" ,'),s+='"'.concat(l.sound,'" ,'),c+='"'.concat(l.repeat,'" ,')):(t+='"'.concat(l.pattern,'"'),n+="".concat(l.barcode),a+='"'.concat(l.mode,'"'),r+='"'.concat(l.model,'"'),o+='"'.concat(l.image,'"'),i+='"'.concat(l.video,'"'),s+='"'.concat(l.sound,'"'),c+='"'.concat(l.repeat,'"'))})),this.output+=t+b[1]+n+b[2]+a+b[3]+r+b[4]+o+b[5]+i+b[6]+s+b[7]+c+b[8]+"".concat(this.getPatterns.length)+b[9]+"".concat(this.getPatterns.length)+b[10],this.output}}]),e}());function j(){return Object(a.useEffect)((function(){var e=document.getElementById("finalOutput"),t=f.compileData();e.innerText=t})),Object(u.jsxs)("div",{className:"final-output",children:[Object(u.jsx)("b",{children:"Generated code for your index.html:"}),Object(u.jsx)("br",{}),Object(u.jsx)("br",{}),Object(u.jsx)("div",{id:"finalOutput",style:{whiteSpace:"pre"}})]})}var x=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(c.a)(n,[{key:"render",value:function(){return Object(u.jsx)("div",{className:"footer",children:Object(u.jsxs)("div",{className:"alert alert-dismissible alert-info",children:[Object(u.jsx)("h4",{children:"Prepare your files"}),Object(u.jsxs)("ul",{children:[Object(u.jsxs)("li",{children:["Pattern Marker - marker, which is generated from an image, to create .patt file use"," ",Object(u.jsx)("b",{children:Object(u.jsx)("a",{href:"https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html",target:"_blank",children:"this link"})}),". Make sure to set Pattern Ration to 0.90."]}),Object(u.jsxs)("li",{children:["Barcode Marker - marker, which is generated in a range of numbers, for example from 0 to 63. You can create a barcode use"," ",Object(u.jsx)("b",{children:Object(u.jsx)("a",{href:"https://au.gmented.com/app/marker/marker.php",target:"_blank",children:"this link"})}),". Make sure you have chosen right oprions:",Object(u.jsx)("li",{children:" Border size (% of marker width): 0.1 "}),Object(u.jsx)("li",{children:" Barcode dimensions: 3\u04453 "}),Object(u.jsx)("li",{children:" Markers have black borders."})]}),Object(u.jsx)("li",{children:".mtl .obj - model files. Both files should be prepared with their textures and correctly added to the project."})]}),Object(u.jsx)("h4",{children:"Working with the generator"}),Object(u.jsxs)("ol",{children:[Object(u.jsxs)("li",{children:["Upload your patterns files or choose barcodes which you will use in your project. This will generate a table which you can use to input other files of your content.",Object(u.jsx)("br",{})]}),Object(u.jsxs)("li",{children:["You can choose what kind of content will be linked with each pattern. For one pattern you can select either model, video or image with one audio file.",Object(u.jsx)("br",{})]}),Object(u.jsx)("li",{children:"After you click submit button the text for the index.html will appear."})]})]})})}}]),n}(r.a.Component),g=x,v=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).state={patternListValues:Array(),patternId:0},a.prepareOptions=function(){for(var e=[],t=0;t<=63;t++)e.push(Object(u.jsx)("option",{children:t}));return Object(u.jsxs)("div",{className:"form-group",style:{marginTop:"12px"},children:["Choose a barcode:",Object(u.jsx)("select",{className:"form-control",style:{marginTop:"12px"},onChange:a.onChange,children:e})]})},a.onInput=a.onInput.bind(Object(m.a)(a)),a.onChange=a.onChange.bind(Object(m.a)(a)),a}return Object(c.a)(n,[{key:"onInput",value:function(e){if(e.preventDefault(),e.target.files[0]){var t=e.target.files[0].name;f.addPattern(t);var n=r.a.createElement("li",{className:"list-group-item d-flex justify-content-between align-items-center",key:this.state.patternId},t);this.setState({patternId:this.state.patternId++}),this.state.patternListValues.push(n),this.setState({patternListValues:this.state.patternListValues})}}},{key:"onChange",value:function(e){e.preventDefault();var t=e.target.value;f.addPattern(t);var n=r.a.createElement("li",{className:"list-group-item d-flex justify-content-between align-items-center",key:this.state.patternId},"Barcode ",t);this.setState({patternId:this.state.patternId++}),this.state.patternListValues.push(n),this.setState({patternListValues:this.state.patternListValues})}},{key:"render",value:function(){return Object(u.jsxs)("div",{className:"pattern-list",children:[Object(u.jsx)("ul",{className:"list-group",children:this.state.patternListValues}),Object(u.jsxs)("div",{className:"custom-file pattern-file-input",children:[Object(u.jsx)("input",{type:"file",className:"custom-file-input",id:"inputGroupFile02",onInput:this.onInput}),Object(u.jsx)("label",{className:"custom-file-label",htmlFor:"inputGroupFile02",children:"Choose file"}),this.prepareOptions()]})]})}}]),n}(a.Component),y=n(7);function O(e){var t=Object(a.useState)(""),n=Object(y.a)(t,2),r=n[0],o=n[1],i=Object(a.useState)(""),s=Object(y.a)(i,2),c=s[0],l=s[1],d=Object(a.useState)(!1),p=Object(y.a)(d,2),h=p[0],m=p[1],b=Object(a.useState)(!1),j=Object(y.a)(b,2),x=j[0],g=j[1],v=Object(a.useState)("image"),O=Object(y.a)(v,2),k=O[0],w=O[1];return Object(u.jsxs)("tr",{className:"table-default",children:[Object(u.jsx)("td",{children:e.name}),Object(u.jsx)("td",{children:Object(u.jsxs)("select",{className:"form-control",onChange:function(t){return"Image"===(n=t.target.value)?n="image":"Video"===n?n="video":"Model"===n&&(n="model"),w(n),void f.updateData("mode",n,e.id);var n},children:[Object(u.jsx)("option",{children:"Image"}),Object(u.jsx)("option",{children:"Video"}),Object(u.jsx)("option",{children:"Model"})]})}),Object(u.jsx)("td",{children:h?r:Object(u.jsxs)("div",{className:"custom-file",children:[Object(u.jsx)("input",{type:"file",className:"custom-file-input content-file-input",id:"inputGroupFile02",onInput:function(t){t.preventDefault();var n=t.target.files[0].name;o(n),m(!0),"image"===k?f.updateData("image",n,e.id):"video"===k?f.updateData("video",n,e.id):"model"===k&&f.updateData("model",n,e.id)}}),Object(u.jsx)("label",{className:"custom-file-label",htmlFor:"inputGroupFile02",children:"Choose file"})]})}),Object(u.jsx)("td",{children:"video"!==k?x?c:Object(u.jsxs)("div",{className:"custom-file",children:[Object(u.jsx)("input",{type:"file",className:"custom-file-input content-file-input",id:"inputGroupFile02",onInput:function(t){t.preventDefault();var n=t.target.files[0].name;l(n),g(!0),f.updateData("sound",n,e.id)}}),Object(u.jsx)("label",{className:"custom-file-label",htmlFor:"inputGroupFile02",children:"Choose file"})]}):null}),Object(u.jsx)("td",{children:Object(u.jsxs)("div",{className:"custom-control custom-switch",children:[Object(u.jsx)("input",{type:"checkbox",className:"custom-control-input",onClick:function(t){f.updateData("repeat","".concat(t.target.checked),e.id)},id:"customSwitch".concat(e.id)}),Object(u.jsx)("label",{className:"custom-control-label",htmlFor:"customSwitch".concat(e.id),children:"Switch"})]})})]})}var k=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){var e;Object(s.a)(this,n);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))).state={tableRows:Array()},e}return Object(c.a)(n,[{key:"componentDidMount",value:function(){var e=this,t=0;this.state.tableRows.push(Object(u.jsxs)("tr",{className:"table-default",children:[Object(u.jsx)("td",{children:Object(u.jsx)("b",{children:".patt file"})}),Object(u.jsx)("td",{children:Object(u.jsx)("b",{children:"Content type"})}),Object(u.jsx)("td",{children:Object(u.jsx)("b",{children:"Content file"})}),Object(u.jsx)("td",{children:Object(u.jsx)("b",{children:"Audio file"})}),Object(u.jsx)("td",{children:Object(u.jsx)("b",{children:"Autoplay"})})]})),f.prepareData(),f.getPatterns.forEach((function(n,a){var r;if(""===n){var o=f.getBarcode(a);r=Object(u.jsx)(O,{name:"Barcode ".concat(o),id:t})}else r=Object(u.jsx)(O,{name:n,id:t});e.state.tableRows.push(r),t++})),this.setState({tableRows:this.state.tableRows})}},{key:"render",value:function(){return Object(u.jsx)("div",{className:"table-wrapper",children:Object(u.jsx)("table",{className:"table table-hover",children:Object(u.jsx)("tbody",{children:this.state.tableRows})})})}}]),n}(a.Component),w=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).state={stage:"pattern"},a.onClick=a.onClick.bind(Object(m.a)(a)),a}return Object(c.a)(n,[{key:"onClick",value:function(){f.getPatterns.length?"pattern"===this.state.stage?this.setState({stage:"table"}):"table"===this.state.stage&&f.codePrepared&&this.setState({stage:"final"}):alert("\u0411\u0443\u0434\u044c \u043b\u0430\u0441\u043a\u0430 \u0445\u043e\u0447\u0430 \u0431 \u043e\u0434\u0438\u043d \u043f\u0430\u0442\u0435\u0440\u043d \u0447\u0438 \u0431\u0430\u0440\u043a\u043e\u0434")}},{key:"render",value:function(){return Object(u.jsxs)("div",{children:["pattern"===this.state.stage?Object(u.jsx)("div",{className:"main-pattern-instruction",children:"Add .patt file or choose a barcode:"}):null,"table"===this.state.stage?Object(u.jsx)(k,{}):"pattern"===this.state.stage?Object(u.jsx)(v,{}):Object(u.jsx)(j,{}),Object(u.jsx)("div",{className:"main-button",style:{marginTop:"24px"},children:"final"===this.state.stage?null:Object(u.jsx)("button",{className:"btn btn-primary",onClick:this.onClick,children:"Confirm"})}),"final"===this.state.stage?null:Object(u.jsx)(g,{})]})}}]),n}(r.a.Component),E=function(e){Object(l.a)(n,e);var t=Object(d.a)(n);function n(){return Object(s.a)(this,n),t.apply(this,arguments)}return Object(c.a)(n,[{key:"render",value:function(){return Object(u.jsxs)("div",{className:"App",children:[Object(u.jsx)(h,{}),Object(u.jsx)(w,{})]})}}]),n}(r.a.Component),C=E;i.a.render(Object(u.jsx)(r.a.StrictMode,{children:Object(u.jsx)(C,{})}),document.getElementById("root"))}},[[17,1,2]]]);
//# sourceMappingURL=main.500658db.chunk.js.map